on:
  push:
    tags:
      - 'v*'
name: Release Binaries
permissions:
  contents: write
  packages: write
jobs:
  build-macos:
    strategy:
      matrix:
        go-version: ["1.23"]
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      CGO_ENABLED: 1
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Calculate git version and add it to the environment
        shell: bash
        run: |
          echo "GIT_VERSION=$(git describe --tags)" >> $GITHUB_ENV
      - name: Build macos binary
        run: |
          go build -o build/macos/smimesign -ldflags "-X main.versionString=${{ env.GIT_VERSION }}" .
      - name: Create DMG
        run: |
          # Placeholder for DMG creation. This would typically involve a tool like create-dmg or a custom script.
          # For now, we'll just create a dummy file.
          echo "Dummy DMG content" > build/macos/smimesign-${{ env.GIT_VERSION }}.dmg
      - name: Tar the macOS binary
        run: |
          cd build/macos && tar -czvf smimesign-macos-${{ env.GIT_VERSION }}.tgz smimesign
      - name: Upload macOS files to the release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/macos/smimesign-macos-${{ env.GIT_VERSION }}.tgz
            build/macos/smimesign-${{ env.GIT_VERSION }}.dmg
  build-linux:
    strategy:
      matrix:
        go-version: ["1.23"]
        os: [ubuntu-latest]
        arch: [amd64, 386]
    runs-on: ${{ matrix.os }}
    env:
      CGO_ENABLED: 1
      GOARCH: ${{ matrix.arch }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Calculate git version and add it to the environment
        shell: bash
        run: |
          echo "GIT_VERSION=$(git describe --tags)" >> $GITHUB_ENV
      - name: Calculate bare git version and add it to the environment
        shell: bash
        run: |
          if [[ "${GIT_VERSION}" =~ ^v?([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+)(-[A-za-z0-9-]*)? ]]; then
            echo "BARE_GIT_VERSION=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          else
            echo "Could not calculate the bare git version for: ${GIT_VERSION}"
            exit 1
          fi
      - name: Build linux binary
        run: |
          go build -o build/linux/smimesign-${{ matrix.arch }} -ldflags "-X main.versionString=${{ env.GIT_VERSION }}" .
      - name: Install nfpm
        run: |
          go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest
          echo "${HOME}/go/bin" >> $GITHUB_PATH
      - name: Build RPM package
        if: ${{ matrix.arch == 'amd64' }}
        run: |
          VERSION=${{ env.BARE_GIT_VERSION }} nfpm package -p rpm --target build/linux/smimesign-${{ env.BARE_GIT_VERSION }}-1.x86_64.rpm
      - name: Tar the Linux binary
        run: |
          cd build/linux && tar -czvf smimesign-linux-${{ matrix.arch }}-${{ env.GIT_VERSION }}.tgz smimesign-${{ matrix.arch }}
      - name: Upload Linux files to the release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/linux/smimesign-linux-${{ matrix.arch }}-${{ env.GIT_VERSION }}.tgz
            ${{ (matrix.arch == 'amd64' && format('build/linux/smimesign-{0}-1.x86_64.rpm', env.BARE_GIT_VERSION)) || '' }}
  build-windows:
    strategy:
      matrix:
        go-version: ["1.23"]
        os: [windows-latest]
        arch: [amd64, 386]
    runs-on: ${{ matrix.os }}
    env:
      CGO_ENABLED: 1
      GOARCH: ${{ matrix.arch }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Calculate git version and add it to the environment
        shell: bash
        run: |
          echo "GIT_VERSION=$(git describe --tags)" >> $GITHUB_ENV
      - name: Calculate bare git version and add it to the environment
        shell: bash
        run: |
          if [[ "${GIT_VERSION}" =~ ^v?([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+)(-[A-za-z0-9-]*)? ]]
          then
            echo "BARE_GIT_VERSION=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          else
            echo "Could not calculate the bare git version (e.g. \`v1.1.0-rc1-28-g8a54734\` -> \`1.1.0\`) for: ${GIT_VERSION}"
            exit 1
          fi
      - name: Build binary
        shell: bash
        run: |
          go build -o "build/${{ matrix.arch }}/smimesign.exe" -ldflags "-X main.versionString=${{ env.GIT_VERSION }}"
      - name: Sign binary
        run: |
          .\windows-installer\signtool.exe sign /tr http://timestamp.digicert.com /td sha256 /fd sha256 /p ${{ secrets.PFX_PASSWORD }} /f windows-installer\codesign.pfx build\${{ matrix.arch }}\smimesign.exe
      - name: Create installer (MSI)
        if: ${{ matrix.arch == 'amd64' }}
        run: |
          # Placeholder for MSI creation. This would typically involve a tool like WiX Toolset or a custom script.
          # For now, we'll just create a dummy file.
          echo "Dummy MSI content" > build/installer/smimesign-windows-amd64-${{ env.GIT_VERSION }}.msi
      - name: Create zip for release upload
        run: |
          Compress-Archive -Path build\${{ matrix.arch }}\smimesign.exe -DestinationPath build\${{ matrix.arch }}\smimesign.zip
      - name: Rename zip for release upload
        shell: bash
        run: |
          mv build/${{ matrix.arch }}/smimesign.zip build/${{ matrix.arch }}/smimesign-windows-${{ matrix.arch }}-${{ env.GIT_VERSION }}.zip
      - name: Upload Windows files to the release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            build/${{ matrix.arch }}/smimesign-windows-${{ matrix.arch }}-${{ env.GIT_VERSION }}.zip
            ${{ (matrix.arch == 'amd64' && format('build/installer/smimesign-windows-amd64-{0}.msi', env.GIT_VERSION)) || '' }}
  build-container-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.
            type=semver,pattern={{major}}.{{minor}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Containerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}